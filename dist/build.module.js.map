{"version":3,"file":"build.module.js","sources":["../src/api.js","../src/braintree.jsx","../src/field.jsx"],"sourcesContent":["import Braintree from 'braintree-web/client';\nimport HostedFields from 'braintree-web/hosted-fields';\n\nfunction cap(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default class BraintreeClientApi {\n\n    fields = {};\n\n    _nextFieldId = 1;\n\n    fieldHandlers = {};\n\n    constructor({ authorization, styles, onAuthorizationSuccess, ...callbacks }) {\n        this.styles = styles || {};\n        this.wrapperHandlers = callbacks || {};\n        this.setAuthorization(authorization, onAuthorizationSuccess);\n    }\n\n    setAuthorization(authorization, onAuthorizationSuccess) {\n        if (!authorization && this.authorization) {\n            this.teardown();\n        } else if (authorization && authorization !== this.authorization) {\n            if (this.authorization) { this.teardown(); }\n            this.authorization = authorization;\n            Braintree.create({ authorization }, (err, clientInstance) => {\n                if (err) {\n                    this.onError(err);\n                } else {\n                    this.create(clientInstance, onAuthorizationSuccess);\n                }\n            });\n        }\n    }\n\n    nextFieldId() {\n        this._nextFieldId += 1;\n        return this._nextFieldId;\n    }\n\n    onError(err) {\n        if (!err) { return; }\n        if (this.wrapperHandlers.onError) { this.wrapperHandlers.onError(err); }\n    }\n\n    create(client, onAuthorizationSuccess) {\n        HostedFields.create({\n            client,\n            styles: this.styles,\n            fields: this.fields,\n        }, (err, hostedFields) => {\n            if (err) {\n                this.onError(err);\n                return;\n            }\n            this.hostedFields = hostedFields;\n            [\n                'blur', 'focus', 'empty', 'notEmpty',\n                'cardTypeChange', 'validityChange',\n            ].forEach((eventName) => {\n                hostedFields.on(eventName, ev => this.onFieldEvent(`on${cap(eventName)}`, ev));\n            });\n            this.onError(err);\n\n            if (onAuthorizationSuccess) {\n                onAuthorizationSuccess();\n            }\n        });\n    }\n\n    teardown() {\n        if (this.hostedFields) { this.hostedFields.teardown(); }\n    }\n\n    checkInField({ formatInput, maxlength, minlength, placeholder, select, type, ...handlers }) {\n        const id = `field-wrapper-${this.nextFieldId()}`;\n        this.fieldHandlers[type] = handlers;\n        this.fields[type] = {\n            formatInput,\n            maxlength,\n            minlength,\n            placeholder,\n            select,\n            selector: `#${id}`,\n        };\n        return id;\n    }\n\n    focusField(fieldType, cb) {\n        this.hostedFields.focus(fieldType, cb);\n    }\n\n    clearField(fieldType, cb) {\n        this.hostedFields.clear(fieldType, cb);\n    }\n\n    onFieldEvent(eventName, event) {\n        const fieldHandlers = this.fieldHandlers[event.emittedBy];\n        if (fieldHandlers && fieldHandlers[eventName]) {\n            fieldHandlers[eventName](event.fields[event.emittedBy], event);\n        }\n        if (this.wrapperHandlers[eventName]) {\n            this.wrapperHandlers[eventName](event);\n        }\n    }\n\n    tokenize(options = {}) {\n        return new Promise((resolve, reject) => {\n            this.hostedFields.tokenize(options, (err, payload) => {\n                if (err) {\n                    this.onError(err);\n                    reject(err);\n                } else {\n                    resolve(payload);\n                }\n            });\n        });\n    }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Api from './api';\n\nexport default class Braintree extends React.Component {\n\n    static propTypes = {\n        children: PropTypes.node.isRequired,\n        onAuthorizationSuccess : PropTypes.func,\n        authorization: PropTypes.string,\n        getTokenRef: PropTypes.func,\n        onValidityChange: PropTypes.func,\n        onCardTypeChange: PropTypes.func,\n        onError: PropTypes.func,\n        styles: PropTypes.object,\n        className: PropTypes.string,\n        tagName: PropTypes.string,\n    }\n\n    static defaultProps = {\n        tagName: 'div',\n    }\n\n    static childContextTypes = {\n        braintreeApi: PropTypes.instanceOf(Api),\n    }\n\n    constructor(props) {\n        super(props);\n        this.api = new Api(props);\n    }\n\n    componentDidMount() {\n        this.api.setAuthorization(this.props.authorization, this.props.onAuthorizationSuccess);\n        if (this.props.getTokenRef) {\n            this.props.getTokenRef(this.api.tokenize.bind(this.api));\n        }\n    }\n\n    componentWillUnmount() {\n        this.api.teardown();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.api.setAuthorization(nextProps.authorization, this.props.onAuthorizationSuccess);\n    }\n\n    tokenize(options) {\n        return this.api.tokenize(options);\n    }\n\n    getChildContext() {\n        return { braintreeApi: this.api };\n    }\n\n    render() {\n        const { className: providedClass, tagName: Tag } = this.props;\n        let className = 'braintree-hosted-fields-wrapper';\n        if (providedClass) { className += ` ${providedClass}`; }\n        return (\n            <Tag className={className}>\n                {this.props.children}\n            </Tag>\n        );\n    }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Api from './api';\n\nexport default class BraintreeHostedField extends React.Component {\n\n    static propTypes = {\n        type: PropTypes.oneOf([\n            'number', 'expirationDate', 'expirationMonth', 'expirationYear', 'cvv', 'postalCode',\n        ]).isRequired,\n        placeholder: PropTypes.string,\n        className: PropTypes.string,\n        onCardTypeChange: PropTypes.func,\n        onValidityChange: PropTypes.func,\n        onNotEmpty: PropTypes.func,\n        onFocus: PropTypes.func,\n        onEmpty: PropTypes.func,\n        onBlur: PropTypes.func,\n    }\n\n    static contextTypes = {\n        braintreeApi: PropTypes.instanceOf(Api),\n    }\n\n    focus() {\n        this.context.braintreeApi.focusField(this.props.type);\n    }\n\n    clear() {\n        this.context.braintreeApi.clearField(this.props.type);\n    }\n\n    componentWillMount() {\n        this.fieldId = this.context.braintreeApi.checkInField(this.props);\n    }\n\n    get className() {\n        const list = ['braintree-hosted-field'];\n        if (this.props.className) { list.push(this.props.className); }\n        return list.join(' ');\n    }\n\n    render() {\n        return <div id={this.fieldId} className={this.className} />;\n    }\n}\n"],"names":["cap","string","charAt","toUpperCase","slice","BraintreeClientApi","authorization","styles","onAuthorizationSuccess","callbacks","fields","_nextFieldId","fieldHandlers","wrapperHandlers","setAuthorization","teardown","create","err","clientInstance","onError","client","hostedFields","forEach","eventName","on","onFieldEvent","ev","formatInput","maxlength","minlength","placeholder","select","type","handlers","id","nextFieldId","fieldType","cb","focus","clear","event","emittedBy","options","Promise","resolve","reject","tokenize","payload","Braintree","props","api","Api","getTokenRef","bind","nextProps","braintreeApi","providedClass","className","Tag","tagName","children","React","Component","propTypes","PropTypes","node","isRequired","func","object","defaultProps","childContextTypes","instanceOf","BraintreeHostedField","context","focusField","clearField","fieldId","checkInField","list","push","join","oneOf","contextTypes"],"mappings":"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"}